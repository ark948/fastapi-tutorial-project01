following the official fastapi documentation tutorial.

url =>
https://fastapi.tiangolo.com/tutorial/

pre:
> python -m venv venv
> venv\Scripts\activate
> pip install fastapi
> pip freeze > requirements.txt
> git init
- add .gitginore
- fill in .gitginore
- add README.md
> git add .
> git branch -M main (rename branch to main)
> git remtoe add origin https://github.com/ark948/fastapi-tutorial-project01.git
> git push --set-upstream origin main

1. to install fastapi (with optional dependencies):
> pip install fastapi

to install fastapi (without optional dependencies):
> pip install fastapi-slim

2. simple fastapi file
save the code in main.py file

3. run the server using:
> fastapi dev <filename.py>
navigate to 127.0.0.1:8000
also localhost/doc (swagger ui)
also localhost/redoc (redoc)

4. fastapi uses OpenAPI standard for defining APIs
(using JSON schema)

5. to view the raw OpenAPI schema:
localhost/openapi.json

fastapi directly inherits from 'Starlette'

6. use python type annotations or type hints when defining endpoints.
data validation is done using Pydantic

7. order of paths matter, put fixed paths (no parameter) before the ones that take parameters.
8. paths can have predefined values, Enum structures can help with this.

9. IMPORTANT, path parameter vs query parameter
localhost/item_id -> item_id is path parameter and will be declared in route definition
localhost/items/?item=2 -> item is a query parameter

10. parameters can be required...
can have default value...
and can be entirely optional

11. fastapi does automatic query conversion:
# http://127.0.0.1:8000/items/foo?short=1
# http://127.0.0.1:8000/items/foo?short=True
# http://127.0.0.1:8000/items/foo?short=true
# http://127.0.0.1:8000/items/foo?short=on
# http://127.0.0.1:8000/items/foo?short=yes
short is set to true in all of these

NOTE: main got two messy, moving along with main02.py file

12. 'Annoated' can be used to add metadata to parameters

13. extra validation can be added to query parameters, such as min and max length, regular expressions

14. by not providing a default None to a parameter, we will make it required
there is also another way to achieve this, by using Ellipsis (...). refer to main02.py

15. query parameters in fastapi can be heavily modified:
they can have validation, defaults, required, optional, title, description, alias, regext pattern, excluded from schema
they can be set to deprecated, for when you still want your clients to use them, but the docs to show they are deprecated

16. extra validation and metadata for query parameters can be declared with Query object.
and extra validation and metadata for path parameters can be declared with Path object.
- following main03.py file

NOTE: if using 'Annoated' from typing package, make sure fastapi version is newer than 0.95

17. a path parameter is always required, because it is part of the endpoint path.

18. IMPORTANT order of parameters do not matter to fastapi, it will detect them by their name.

19. Query and Path, and some other later to be introduced, are subclasses of 'Param' class.

- Continuing on main04.py
- Body - Multiple Parameters